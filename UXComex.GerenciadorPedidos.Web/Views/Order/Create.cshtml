@model UXComex.GerenciadorPedidos.Web.ViewModels.OrderViewModel

@{
    ViewData["Title"] = "Create New Order";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-10 offset-lg-1">
            <div class="card shadow-sm rounded">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create New Order</h4>
                </div>
                <div class="card-body">
                    <form asp-action="Create" method="post" id="createOrderForm">
                        @Html.AntiForgeryToken()

                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="form-group mb-4">
                            <label asp-for="ClientId" class="control-label fs-5"></label>
                            <select asp-for="ClientId" asp-items="@(new SelectList(Model.AvailableClients, "Id", "Name"))" class="form-control" id="clientDropdown">
                                <option value="">Select a Client</option>
                            </select>
                            <span asp-validation-for="ClientId" class="text-danger"></span>
                        </div>

                        <hr />

                        <h5 class="mt-4 mb-3">Order Items</h5>
                        <div id="orderItemsContainer">
                            <!-- Order items will be added here dynamically -->
                        </div>
                        <button type="button" class="btn btn-info btn-sm mt-3" id="addItemButton">Add Product</button>

                        <hr class="mt-4" />

                        <div class="d-flex justify-content-end mb-4">
                            <h4 class="me-3">Total Value:</h4>
                            <h4 id="orderTotal" class="text-success fw-bold">R$ 0,00</h4>
                        </div>

                        <div class="d-flex justify-content-between mt-4">
                            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                            <button type="submit" class="btn btn-primary" id="saveOrderButton">Create Order</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            let itemIndex = 0;
            const availableProducts = @Html.Raw(Json.Serialize(Model.AvailableProducts));

            function addOrderItemRow(item) {
                const newRow = `
                    <div class="order-item-row card mb-3 p-3">
                        <div class="d-flex justify-content-end mb-2">
                            <button type="button" class="btn-close remove-item-button" aria-label="Remove"></button>
                        </div>
                        <input type="hidden" name="OrderItems.Index" value="${itemIndex}" />

                        <div class="row g-3">
                            <div class="col-md-5">
                                <label class="form-label">Product</label>
                                <select name="OrderItems[${itemIndex}].ProductId" class="form-control product-dropdown" required>
                                    <option value="">Select Product</option>
                                    ${availableProducts.map(p => `<option value="${p.id}" data-price="${p.price}" data-stock="${p.stockQuantity}">${p.name}</option>`).join('')}
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Quantity</label>
                                <input type="number" name="OrderItems[${itemIndex}].Quantity" class="form-control quantity-input" value="1" min="1" required />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Subtotal</label>
                                <input type="text" class="form-control subtotal-output" value="R$ 0,00" readonly />
                            </div>
                        </div>
                    </div>
                `;
                $('#orderItemsContainer').append(newRow);
                itemIndex++;
            }

            // Calculate the total value of the order
            function calculateTotal() {
                let total = 0;
                $('.order-item-row').each(function () {
                    const price = parseFloat($(this).find('.product-dropdown option:selected').data('price')) || 0;
                    const quantity = parseInt($(this).find('.quantity-input').val()) || 0;
                    total += price * quantity;
                });
                $('#orderTotal').text(`R$ ${total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`);
            }

            // Initial load
            calculateTotal();

            // Add a new item and recalculate total on button click
            $('#addItemButton').on('click', function () {
                addOrderItemRow();
                calculateTotal();
            });

            // Remove an item (using event delegation) and recalculate total
            $('#orderItemsContainer').on('click', '.remove-item-button', function () {
                $(this).closest('.order-item-row').remove();
                calculateTotal();
            });

            // Event handler for changes in product selection or quantity
            $('#orderItemsContainer').on('change', '.product-dropdown, .quantity-input', function () {
                const row = $(this).closest('.order-item-row');
                const productDropdown = row.find('.product-dropdown');
                const quantityInput = row.find('.quantity-input');
                const subtotalOutput = row.find('.subtotal-output');

                const selectedOption = productDropdown.find('option:selected');
                const price = parseFloat(selectedOption.data('price')) || 0;
                const stock = parseInt(selectedOption.data('stock')) || 0;
                let quantity = parseInt(quantityInput.val()) || 0;

                // Client-side stock validation
                if (quantity > stock) {

                    alert(`Requested quantity (${quantity}) exceeds available stock (${stock}) for this product.`);
                    quantityInput.val(stock); // Set quantity to max available
                    quantity = stock;
                }

                const subtotal = price * quantity;
                subtotalOutput.val(`R$ ${subtotal.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`);

                calculateTotal();
            });

            // Handle initial state on page load
            $('#orderItemsContainer').find('.product-dropdown').trigger('change');

            // Submission validation
            $('#createOrderForm').on('submit', function (e) {
                if ($('.order-item-row').length === 0) {
                    e.preventDefault();
                    alert("Please add at least one product to the order.");
                }
            });
        });
    </script>
}
