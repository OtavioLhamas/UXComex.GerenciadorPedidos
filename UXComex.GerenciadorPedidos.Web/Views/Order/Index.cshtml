<!-- -------------------------------------------------------------------------------------- -->
<!-- File: UXComex.GerenciadorPedidos.Web/Views/Order/Index.cshtml (UPDATED) -->
<!-- -------------------------------------------------------------------------------------- -->
@model UXComex.GerenciadorPedidos.Web.ViewModels.OrderFilterViewModel

@{
    ViewData["Title"] = "Orders";
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Order List</h2>
        <a asp-action="Create" class="btn btn-primary">Create New Order</a>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <select id="clientFilter" class="form-control">
                <option value="">All Clients</option>
                @foreach (var client in Model.AvailableClients)
                {
                    <option value="@client.Id">@client.Name</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select id="statusFilter" class="form-control">
                <option value="">All Statuses</option>
                @foreach (var status in Model.AvailableStatuses)
                {
                    <option value="@status">@status</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" type="button" id="searchButton">Filter</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-hover rounded shadow-sm">
            <thead class="thead-dark">
                <tr>
                    <th>Order #</th>
                    <th>Client</th>
                    <th>Date</th>
                    <th>Total Value</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="ordersTableBody">
                <!-- Table rows will be populated dynamically by jQuery -->
            </tbody>
        </table>
    </div>

    <!-- Pagination controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination" id="pagination-container">
        </ul>
    </nav>
</div>

<!-- Change Status Modal -->
<div class="modal fade" id="changeStatusModal" tabindex="-1" aria-labelledby="changeStatusModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="changeStatusModalLabel">Change Order Status</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="changeStatusForm">
                <div class="modal-body">
                    <input type="hidden" id="modalOrderId" name="orderId" />
                    <div class="mb-3">
                        <label for="newStatus" class="form-label">New Status</label>
                        <select id="newStatus" name="newStatus" class="form-control">
                            @foreach (var status in Model.AvailableStatuses)
                            {
                                <option value="@status">@status</option>
                            }
                        </select>
                    </div>
                    <div id="statusChangeMessage" class="mt-3"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @Html.AntiForgeryToken()

    <script>
        $(document).ready(function () {            
            const availableStatuses = @Html.Raw(Json.Serialize(Model.AvailableStatuses));

            let currentPage = 1;
            let pageSize = 10;
            let currentClientId = null;
            let currentStatus = null;

            function loadOrders(page, clientId, status) {
                // Show a loading indicator
                $('#ordersTableBody').html('<tr><td colspan="6" class="text-center">Loading...</td></tr>');

                $.get('@Url.Action("GetOrders", "Order")', {
                    clientId: clientId,
                    status: status,
                    pageNumber: page,
                    pageSize: pageSize
                }, function (data) {
                    const orders = data.items;
                    const totalPages = data.totalPages;

                    // Clear existing rows
                    $('#ordersTableBody').empty();

                    if (orders.length === 0) {
                        $('#ordersTableBody').html('<tr><td colspan="6" class="text-center">No orders found.</td></tr>');
                    } else {
                        // Populate the table with new data
                        $.each(orders, function (index, order) {

                            console.log(order)
                            const row = `<tr class="clickable-row" data-order-id="${order.id}">
                                <td>${order.id}</td>
                                <td>${order.client.name}</td>
                                <td>${new Date(order.creationDate).toLocaleDateString('pt-BR')}</td>
                                <td>${order.totalValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</td>
                                <td>${availableStatuses[order.status]}</td>
                                <td>
                                    <button class="btn btn-sm btn-warning change-status-btn" data-order-id="${order.id}">Change Status</button>
                                </td>
                            </tr>`;
                            $('#ordersTableBody').append(row);
                        });
                    }

                    // Rebuild pagination links
                    const paginationContainer = $('#pagination-container');
                    paginationContainer.empty();

                    for (let i = 1; i <= totalPages; i++) {
                        const activeClass = i === page ? 'active' : '';
                        const li = `<li class="page-item ${activeClass}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                        paginationContainer.append(li);
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) {
                    $('#ordersTableBody').html('<tr><td colspan="6" class="text-center text-danger">Failed to load orders.</td></tr>');
                    console.error("Error fetching orders:", errorThrown);
                });
            }

            // Initial load of orders
            // TODO: change the currentSearchTerm to be a ViewData attribute,
            // so if the user searches and then navigates away and comes back,
            // the search term is preserved.
            loadOrders(currentPage, currentClientId, currentStatus);

            $('#searchButton').on('click', function () {
                currentClientId = $('#clientFilter').val() || null;
                currentStatus = $('#statusFilter').val() || null;
                currentPage = 1;
                loadOrders(currentPage, currentClientId, currentStatus);
            });

            // Handle clicks on dynamically created rows
            $('#ordersTableBody').on('click', '.clickable-row', function() {
                const orderId = $(this).data('order-id');
                window.location.href = `/Order/Details/${orderId}`;
            });

            // Use event delegation for the "Change Status" button
            $('#ordersTableBody').on('click', '.change-status-btn', function(e) {
                // Prevent the row click event from firing
                e.stopPropagation();

                const orderId = $(this).data('order-id');
                const status = $(this).closest('tr').data('current-status');

                $('#modalOrderId').val(orderId);
                $('#newStatus').val(status);
                $('#statusChangeMessage').text(''); // Clear any previous messages

                var changeStatusModal = new bootstrap.Modal(document.getElementById('changeStatusModal'));
                changeStatusModal.show();
            });

            // Change status modal confirmation
            $('#changeStatusForm').on('submit', function(e) {
                e.preventDefault();
                const form = $(this);
                const orderId = $('#modalOrderId').val();
                const newStatus = $('#newStatus').val();

                $.post('@Url.Action("ChangeStatus", "Order")', { orderId: orderId, newStatus: newStatus, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() }, function(data) {
                    if (data.success) {
                        // Refresh the table on success
                        $('#statusChangeMessage').removeClass('text-danger').addClass('text-success').text(data.message);
                        loadOrders(currentPage, currentClientId, currentStatus);
                        setTimeout(function() {
                            bootstrap.Modal.getInstance(document.getElementById('changeStatusModal')).hide();
                        }, 2000);
                    } else {
                        $('#statusChangeMessage').removeClass('text-success').addClass('text-danger').text(data.message);
                    }
                }).fail(function() {
                    $('#statusChangeMessage').removeClass('text-success').addClass('text-danger').text('An error occurred while updating the order status. Please try again.');
                });
            });
            $('#pagination-container').on('click', '.page-link', function (e) {
                e.preventDefault();
                const newPage = $(this).data('page');
                if (newPage !== currentPage) {
                    currentPage = newPage;
                    loadOrders(currentPage, currentClientId, currentStatus);
                }
            });
        });
    </script>
}
